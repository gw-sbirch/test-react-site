{"version":3,"sources":["logo.svg","api/api.yaml","components/DragAndDrop.js","components/FileAttributes.js","components/RenderResults.js","api/engineApi.js","components/LoadingIndicator.js","components/ProcessFile.js","components/AppHeader.js","components/App.js","components/fileTypeDetectionSwag.js","index.js"],"names":["module","exports","DragAndDrop","props","useState","drag","setDrag","dragCounter","setDragCounter","handleDrag","e","preventDefault","stopPropagation","handleDragIn","dataTransfer","items","length","handleDragOut","handleDrop","files","clearData","dropRef","React","createRef","useEffect","div","current","addEventListener","removeEventListener","className","ref","children","FileAttributes","truncated","fileName","fileExtension","fileType","fileSize","substring","content","RenderResults","results","map","result","index","key","engineApi","apiKey","file","data","FormData","append","console","log","fetch","urlPrefix","method","body","headers","LoadingIndicator","loading","zipHelper","blob","zip","JSZip","Promise","resolve","reject","loadAsync","then","loadedZip","fileRefs","Object","values","zipFileReaders","Array","from","forEach","zf","a","dir","push","async","name","all","ProcessFile","setResults","filesProcessed","setFilesProcessed","setLoading","zipUnpackingTasks","fileTypeDetectionCalls","getFileTypeAsync","extension","handleBlob","response","responseToJson","json","getResultFromDeserialised","status","deserialised","toLowerCase","split","pop","zipHandleTask","zippedFiles","error","zt","responses","CSSTransition","in","timeout","enter","exit","classNames","AppHeader","src","logo","alt","height","App","setApiKey","type","placeholder","onInput","event","target","value","hidden","FileTypeDetectionSwag","url","window","location","origin","yam","ReactDOM","render","basename","path","exact","document","getElementById"],"mappings":"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","file":"static/js/main.b28c3a3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f2df34b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/api.980d9789.yaml\";","import React, { useState, useEffect } from 'react'\r\n\r\nfunction DragAndDrop(props) {\r\n  var [drag, setDrag] = useState(false);\r\n  var [dragCounter, setDragCounter] = useState(false);\r\n\r\n  var handleDrag = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n\r\n  var handleDragIn = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragCounter(dragCounter++);\r\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\r\n      setDrag(true);\r\n    }\r\n  };\r\n\r\n  var handleDragOut = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setDragCounter(dragCounter--);\r\n    if (dragCounter === 0) {\r\n      setDrag(false);\r\n    }\r\n  }\r\n  var handleDrop = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDrag(false);\r\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n      props.handleDrop(e.dataTransfer.files)\r\n      try {\r\n      e.dataTransfer.clearData()\r\n      } \r\n      catch \r\n      {\r\n\r\n      }\r\n      setDragCounter(0);\r\n    }\r\n  }\r\n  \r\n  var dropRef = React.createRef();\r\n  useEffect(() => {\r\n    let div = dropRef.current\r\n    div.addEventListener('dragenter', handleDragIn)\r\n    div.addEventListener('dragleave', handleDragOut)\r\n    div.addEventListener('dragover', handleDrag)\r\n    div.addEventListener('drop', handleDrop)\r\n    return () => {\r\n    div.removeEventListener('dragenter', handleDragIn)\r\n    div.removeEventListener('dragleave', handleDragOut)\r\n    div.removeEventListener('dragover', handleDrag)\r\n    div.removeEventListener('drop', handleDrop)\r\n  };\r\n}, []);\r\n    return (\r\n      <div className=\"drop-border\" ref={dropRef}>\r\n        {\r\n          drag && <div className=\"drop-border-dragging\"/>\r\n        }\r\n        {props.children}\r\n      </div>\r\n    );\r\n}\r\nexport default DragAndDrop;","import React from 'react';\r\nimport Tippy from '@tippy.js/react';\r\nimport 'tippy.js/dist/tippy.css';\r\n\r\nfunction FileAttributes({ fileName, fileExtension, fileType, fileSize }) {\r\n\r\n  const truncatLength = 40;\r\n  var truncated;\r\n  if (fileName.length > truncatLength)\r\n  {\r\n    truncated = fileName.substring(0, truncatLength);\r\n  }\r\n  else\r\n  {\r\n    truncated = fileName;\r\n  }\r\n\r\n  return (\r\n          <tr className={fileExtension !== fileType ? \"type-danger\" : \"\"}>\r\n            <Tippy content={fileName}>\r\n            <td>{fileName === truncated ? fileName : `${truncated}...${fileExtension}`}</td>\r\n            </Tippy>\r\n            <td>{fileExtension}</td>\r\n            <td>{fileType}</td>\r\n            <td>{fileSize}</td>\r\n          </tr>\r\n  );\r\n}\r\n\r\nexport default FileAttributes;","import React from \"react\";\r\nimport FileAttributes from \"./FileAttributes\";\r\n\r\nfunction RenderResults(props) {\r\n  return (\r\n    <section className=\"results-section\">\r\n    <div className=\"file-attributes table-container\">\r\n      <h1 className=\"table-header\">File Attributes</h1>\r\n      <table>\r\n        <thead>\r\n          <tr className=\"header-row\">\r\n          <th>File Name</th>\r\n          <th>Declared File Type</th>\r\n          <th>Actual File Type</th>\r\n          <th>File Size</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.results && props.results.map((result, index) => <FileAttributes key={`result-${index}`} {...result} />)}\r\n        </tbody>\r\n        </table>\r\n        </div>\r\n        </section>\r\n  );\r\n}\r\n\r\nexport default RenderResults;\r\n","const urlPrefix = 'https://xugc5ib648.execute-api.eu-west-1.amazonaws.com/Prod/';\r\nconst fileTypeDetectionUrl = urlPrefix + 'api/FileTypeDetection';\r\n\r\nconst getFileType = (apiKey, file) => {\r\n    var data = new FormData();\r\n    \r\n    data.append(\"file\", file);\r\n\r\n    console.log(file)\r\n    //return new Promise(() => {});\r\n    return fetch(fileTypeDetectionUrl, {\r\n      method: \"POST\",\r\n      body: data,\r\n      headers: {\r\n        \"x-api-key\": apiKey        \r\n      }\r\n    });\r\n}\r\n\r\nexport const engineApi = {\r\n  getFileType\r\n};\r\n","import {usePromiseTracker} from \"react-promise-tracker\";\r\nimport React from \"react\";\r\n\r\nfunction LoadingIndicator(props) {\r\n  if (!props.loading)\r\n    return null;\r\n\r\n  return (\r\n      <div className=\"spinner-container\">\r\n        <div className=\"spinner\"></div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default LoadingIndicator;\r\n","import React, { useState } from \"react\";\r\nimport \"../App.css\";\r\n\r\nimport DragAndDrop from \"./DragAndDrop\";\r\nimport RenderResults from \"./RenderResults\";\r\nimport { engineApi } from \"../api/engineApi\";\r\nimport LoadingIndicator from \"./LoadingIndicator\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport JSZip from \"jszip\";\r\nconst readZipAsync = (blob) => {\r\n    var zip = new JSZip();\r\n    return new Promise((resolve, reject) => {\r\n        zip.loadAsync(blob).then(loadedZip => {\r\n            const fileRefs = Object.values(loadedZip.files);\r\n            var zipFileReaders = [];\r\n            Array.from(fileRefs).forEach(async (zf) => {\r\n                if (!zf.dir) {\r\n                    zipFileReaders.push(zf.async(\"blob\").then(blob => {\r\n                        blob.name = zf.name;\r\n                        return blob;\r\n                    }));\r\n                }\r\n            });\r\n            Promise.all(zipFileReaders).then(resolve, reject);\r\n        }, reject);\r\n    })\r\n}\r\n\r\nconst zipHelper = {\r\n    readZipAsync\r\n};\r\n\r\nfunction ProcessFile(props) {\r\n    var [results, setResults] = useState(null);\r\n    var [filesProcessed, setFilesProcessed] = useState(false);\r\n    var [loading, setLoading] = useState(false);\r\n\r\n    var handleDrop = files => {\r\n        setLoading(true);\r\n        setFilesProcessed(false);\r\n        setResults([]);\r\n\r\n        var zipUnpackingTasks = [];\r\n        var fileTypeDetectionCalls = [];\r\n        var getFileTypeAsync = (file, extension) => \r\n        {\r\n          return new Promise((resolve) => {\r\n            var result = { \r\n                fileName: file.name,\r\n                fileExtension: extension,\r\n                fileType: \"Unknown\",\r\n                fileSize: 0\r\n              };\r\n\r\n            var handleBlob = async () => {\r\n                try {\r\n                    const response = await engineApi.getFileType(props.apiKey, file);\r\n                    const json = await responseToJson(response);\r\n                    getResultFromDeserialised(json, file);\r\n                }\r\n                catch (error) {\r\n                    console.log(error);\r\n                }\r\n\r\n                resolve(result);\r\n            };\r\n\r\n            var responseToJson = response => {\r\n                if (response.status !== 200) {\r\n                    console.log(response);\r\n                    return { fileType: \"Error\", fileSize: 0, status: response.status };\r\n                }\r\n\r\n                return response.json();\r\n            };\r\n\r\n            var getResultFromDeserialised = (deserialised) => {\r\n                result.fileType = deserialised.fileType.toLowerCase();\r\n                result.fileSize = deserialised.fileSize;  \r\n                return deserialised;\r\n            };\r\n\r\n            handleBlob();\r\n        });\r\n      }\r\n\r\n        Array.from(files).forEach(file => {\r\n            var extension = file.name.split(\".\").pop().toLowerCase();\r\n\r\n            if (extension === \"zip\") {\r\n                var zipHandleTask = zipHelper.readZipAsync(file).then((zippedFiles) => {\r\n                    zippedFiles.forEach(zf => {\r\n                      extension = zf.name.split(\".\").pop().toLowerCase();\r\n                      zf.name = \"[\" + file.name + \"] -> \" + zf.name;\r\n                      fileTypeDetectionCalls.push(getFileTypeAsync(zf, extension));\r\n                    });\r\n                }, error => {\r\n                  console.log(error);\r\n                  fileTypeDetectionCalls.push(getFileTypeAsync(file, extension));\r\n\r\n                });\r\n                zipUnpackingTasks.push(zipHandleTask);\r\n            }\r\n            else {\r\n                fileTypeDetectionCalls.push(getFileTypeAsync(file, extension));\r\n            }\r\n        });\r\n\r\n        Promise.all(zipUnpackingTasks).then((zt) => {\r\n          Promise.all(fileTypeDetectionCalls).then(responses => {\r\n            setResults(responses);\r\n            setFilesProcessed(true);\r\n            setLoading(false);\r\n          });\r\n        }, error => {\r\n          console.log(error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-body\">\r\n            <h1>Drag and drop files to determine their file type. Files in Zip's will be determined separately.</h1>\r\n            <DragAndDrop handleDrop={handleDrop}>\r\n                <div className=\"loading-container\">\r\n                    <LoadingIndicator key={6} loading={loading} />\r\n                </div>\r\n            </DragAndDrop>\r\n            <CSSTransition in={filesProcessed} timeout={{ enter: 500, exit: 500 }} classNames=\"results\">\r\n                <>\r\n                    {filesProcessed && <RenderResults results={results} />}\r\n                </>\r\n            </CSSTransition>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProcessFile;","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\n\r\nvar AppHeader = () => {\r\n    return (\r\n        <div className=\"app-header\">\r\n            <div className=\"logo\"><img src={logo} alt=\"Logo\" height=\"90\" /></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppHeader;","import React, { useState } from \"react\";\r\nimport \"../App.css\";\r\nimport ProcessFile from \"../components/ProcessFile\"\r\nimport AppHeader from \"./AppHeader\";\r\n\r\nfunction App() {\r\n  var [apiKey, setApiKey] = useState(\"v1j1jXSdPo8Z7iRW4H34va89ho9mt6KV5y9zezVn\");\r\n\r\n  var onApiKeyChange = event => {\r\n      setApiKey(event.target.value);\r\n  }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"app filedrop\">\r\n\r\n          <input type=\"text\" placeholder=\"Api Key\" onInput={onApiKeyChange} hidden />\r\n          <ProcessFile apiKey={apiKey}/>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React, { useEffect } from \"react\";\r\nimport yam from \"../api/api.yaml\"; \r\nimport SwaggerUI from \"swagger-ui-react\"\r\nimport \"swagger-ui-react/swagger-ui.css\"\r\nimport AppHeader from \"./AppHeader\";\r\n\r\nvar FileTypeDetectionSwag = () => {\r\n    return (\r\n        <>\r\n            <AppHeader />\r\n            <SwaggerUI url={window.location.origin + yam} />\r\n        </>);\r\n}\r\n\r\nexport default FileTypeDetectionSwag;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport FileTypeDetectionSwag from \"./components/fileTypeDetectionSwag\";\r\n\r\nimport {\r\n    HashRouter as Router,\r\n    Route,\r\n} from \"react-router-dom\";\r\n\r\nvar Root = () => {\r\n  return (\r\n  <Router basename='/'>\r\n    <Route path=\"/drop\"><App /></Route>\r\n    <Route path=\"/\" exact><FileTypeDetectionSwag /></Route>\r\n  </Router>);\r\n}\r\n\r\nReactDOM.render(<Root />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}